@{
    ViewBag.Title = "title";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript" src="/Scripts/jquery.unobtrusive-ajax.js"></script>
<script type="text/javascript" src="/Scripts/Editor/utils.js"></script> 
<script type="text/javascript" src="/Scripts/Editor/wall-tool.js"></script>
<script type="text/javascript" src="/Scripts/Editor/room-tool.js"></script>
<script type="text/javascript" src="/Scripts/Editor/move-tool.js"></script>
<script type="text/javascript" src="/Scripts/Editor/point-tool.js"></script>
<script type="text/javascript" src="/Scripts/Editor/door-tool.js"></script>

<script type="text/javascript" src="/Scripts/Editor/SchemeGraph.js"></script>
<script type="text/javascript" src="/Scripts/Editor/popup.js"></script>

<div id="mainPanel" style="margin-top:40px;position:relative">
    <div id="toolbox" class="toolbox" style="float:left; width:200px">
        <div style="margin-bottom:10px;font-size:14pt;color:black;font-weight: bold">
            Инструменты
        </div>
        <div>
            <div class="toolbox-btn toolbox-btn-pressed" id="wall" title="Стена">
                <div class="wall-btn">&zwj;</div>
            </div>
            <div class="toolbox-btn" id="room" title="Создать комнату">
                <div class="room-btn">&zwj;</div>
            </div>
        </div>
        <div>
            <div class="toolbox-btn" id="pointInRoom" title="Точка в комнате">
                <div class="location-btn">&zwj;</div>
            </div>
            <div class="toolbox-btn" id="coordPoint" title="Точка с координатами">
                <div class="point-btn">&zwj;</div>
            </div>
        </div>
        <div>
            <div class="toolbox-btn" id="QRCode" title="QR-Code">
                <div class="qrcode-btn">&zwj;</div>
            </div>
            <div class="toolbox-btn" id="door" title="door">
                <div class="door-btn">&zwj;</div>
            </div>
        </div>
    
        <div style="margin-top:50px">
            <div class="scheme-image">
                &darr; Изображение схемы
            </div>
        </div>
        
        <div style="margin-top:20px;text-align: center">
            <div id="saveScheme" style="width:170px" class="common-btn">Сохранить</div>
        </div>
    </div>
    <div id="canvasPanel" style='margin-top:20px'>
        <canvas id="canvas" width="800" height="500" style='background-color:#eee'></canvas>
    </div>
    
    <div style="left:220px;bottom:5px;position:absolute;z-index:1;width:800px;height:500px">
        <canvas id="upCanvas" class="canvas" tabindex="1" width="800" height="500"></canvas>
    </div>
</div>

<script type="text/javascript">
    var _selectedTool = null;
    $().ready(function () {
        initTools();
        bindEvents();

        $('#toolbox .toolbox-btn').click(function () {
            $('#toolbox .toolbox-btn').removeClass('toolbox-btn-pressed');

            $(this).addClass('toolbox-btn-pressed');
            var toolId = $(this).attr('id');
            var newTool = _idToTool[toolId];
            
            // Отключаем предыдущий инструмент
            if (_selectedTool)
                _selectedTool.deActivate();

            // Включаем выделенный инструмент
            _selectedTool = newTool;
            if (_selectedTool)
                _selectedTool.activate(toolId);
        });

        initData();
    });

    var toolContext = null;
    function initTools() {
        var upCtx = document.getElementById('upCanvas').getContext('2d');
        var downCtx = document.getElementById('canvas').getContext('2d');
        toolContext = {
            DownCtx: downCtx,
            UpCtx: upCtx,
            State: _state,
            Width: 800,
            Height: 500,
            DownCanvas: $('#canvas'),
            UpCanvas: $('#upCanvas'),
            Graph: new SchemeGraph(),
            Rooms: {},
            Doors:[]
        };

        _selectedTool = _idToTool['wall'] = new WallTool(toolContext);
        _idToTool['room'] = new RoomTool(toolContext);
        _idToTool['pointInRoom'] = new PointTool(toolContext);
        _idToTool['coordPoint'] = new PointTool(toolContext);
        _idToTool['QRCode'] = new PointTool(toolContext);
        _idToTool['door'] = new DoorTool(toolContext);
    }
    
    function bindEvents() {
        function onclick(event) {
            var coords = getCursorPosition(event);
            if (_selectedTool && _selectedTool.click)
                _selectedTool.click(coords);
        };

        var upCanvas = document.getElementById('upCanvas');
        upCanvas.addEventListener("click", function (event) { onclick(event); }, false);
        
        $('#upCanvas').mousedown(function(event) {
            var coords = getCursorPosition(event);
            if (_selectedTool && _selectedTool.mouseDown)
                _selectedTool.mouseDown(coords);
        });

        $('#upCanvas').mouseup(function(event) {
            var coords = getCursorPosition(event);
            if (_selectedTool && _selectedTool.mouseUp)
                _selectedTool.mouseUp(coords);
        });

        $('#upCanvas').mousemove(function(event) {
            var coords = getCursorPosition(event);
            if (_selectedTool && _selectedTool.mouseMove)
                _selectedTool.mouseMove(coords);
        });

        $('#upCanvas').keydown(function (event) {
            event.keyCode = event.keyCode ? event.keyCode : event.which;
            if (_selectedTool && _selectedTool.keydown) {
                _selectedTool.keydown(event);
            }
        });
    }

    function getCursorPosition(e) {
        var x;
        var y;
        if (e.pageX != undefined && e.pageY != undefined) {
            x = e.pageX;
            y = e.pageY;
        } else {
            x = e.clientX + document.body.scrollLeft +
                document.documentElement.scrollLeft;
            y = e.clientY + document.body.scrollTop +
                document.documentElement.scrollTop;
        }
        x -= $('#upCanvas').offset().left;
        y -= $('#upCanvas').offset().top;

        return { x: x, y: y };
    }

    var _idToTool = {};
    var _state = { Walls: [] };
    
    function convertToServer() {
        var result = { rooms: [], items: [] };
        
        var rooms = toolContext.Rooms;
        for (var k in rooms) {
            if (!rooms.hasOwnProperty(k))
                continue;

            var room = rooms[k];
            var roomInfo = {
                title: room.Name,
                color: room.Color,
                id: k,
                points:[]
            };
            
            for (var i = 0; i < room.Contour.length; ++i) {
                var idx = room.Contour[i];
                var point = toolContext.Graph.getPointFromIndex(idx);
                var pointInfo = [point.x, point.y];
                roomInfo.points.push(pointInfo);
            }

            result.rooms.push(roomInfo);
            
            for (i = 0; i < room.Items.length; ++i) {
                var item = room.Items[i];
                var itemInfo = {
                    title: item.Name,
                    room: k,
                    qr_code: item.QRCode,
                };
                if (item.x) {
                    itemInfo.location = [item.x, item.y];
                }
                result.items.push(itemInfo);
            }
            
            result.doors = toolContext.Doors;
        }
        return result;
    }
    
    function convertFromServer(data) {
        toolContext.Doors = data.doors;

        for (var i = 0; i < data.rooms.length; ++i) {
            var roomInfo = data.rooms[i];
            var contour = [];

            var lastIdx = null;
            for (var j = 0; j < roomInfo.points.length; ++j)
            {
                var coords = roomInfo.points[j];
                if (coords[0] < -0.5 || coords[1] < -0.5)
                    continue;
                
                var point = { x: coords[0], y: coords[1] };
                var idx = toolContext.Graph.getPointIndex(point);
                if (lastIdx)
                    toolContext.Graph.addWall(lastIdx, idx, toolContext);
                lastIdx = idx;
                contour.push(idx);
            }
            toolContext.Graph.addWall(contour[contour.length - 1], contour[0], toolContext);
            toolContext.Graph.addWall(contour[0], contour[1], toolContext);
            
            var room = {
                Name: roomInfo.title,
                Color: roomInfo.color,
                Contour: contour,
                Items:{}
            };
            toolContext.Rooms[roomInfo.id] = room;
        }
        
        for (i = 0; i < data.items.length; ++i) {
            var itemInfo = data.items[i];
            room = toolContext.Rooms[itemInfo.room];
            var item = {
                Name: itemInfo.title,
                QRCode:itemInfo.qr_code,    
            };
            coords = itemInfo.locataion;
            if (coords) {
                item.x = coords[0];
                item.y = coords[1];
            }

            room.items.push(item);
        }
    }
    
    
    function initData() {
        convertFromServer(serverData);
        
        $('#saveScheme').click(function() {
            var toServer = convertToServer();
            $.ajax({
                url: '@Url.Action("Save", "SchemeEditor")',
                type: 'post',
                data: { file: JSON.stringify(toServer) }
                });
        });
    }

    @if (!String.IsNullOrEmpty(ViewBag.Scheme))
    {
        @:var serverData = @Html.Raw(ViewBag.Scheme)
    }
</script>